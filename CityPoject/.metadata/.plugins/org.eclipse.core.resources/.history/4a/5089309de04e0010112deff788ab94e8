package city.proj;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;

import org.semanticweb.HermiT.Reasoner;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.AxiomType;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLClassAssertionAxiom;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLDataPropertyAssertionAxiom;
import org.semanticweb.owlapi.model.OWLIndividual;
import org.semanticweb.owlapi.model.OWLLiteral;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLObjectPropertyAssertionAxiom;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.reasoner.InferenceType;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.reasoner.OWLReasonerFactory;
import org.semanticweb.owlapi.vocab.OWL2Datatype;

import city.proj.entity.Job;
import city.proj.entity.Person;
import city.proj.entity.Place;
import city.proj.helpers.Trait;

public class CityOntology {

	private OWLOntologyManager ontoManager;
	private OWLOntology cityOntology;
	private OWLDataFactory dataFactory;
	private CityAdminAgent cityAdmin;
	private String ontologyIRIStr;
	private OWLReasonerFactory reasonerFactory;
	private OWLReasoner reasoner;
	private int lastHouseId = 0;
	private int lastApartmentId = 0;
	private List<Place> apartments = new ArrayList<Place>();

	public CityOntology(CityAdminAgent admin) {
		cityAdmin = admin;
		ontoManager = OWLManager.createOWLOntologyManager();
		dataFactory = ontoManager.getOWLDataFactory();
		loadOntology();

		// reasonerFactory = new Reasoner.ReasonerFactory();
		// reasoner = reasonerFactory.createReasoner(cityOntology);

// Optional: precompute inferences
		// reasoner.precomputeInferences(InferenceType.CLASS_ASSERTIONS,
		// InferenceType.OBJECT_PROPERTY_ASSERTIONS);

		ontologyIRIStr = cityOntology.getOntologyID().getOntologyIRI().toString() + "#";

	}

	private void loadOntology() {
		File ontology = new File("src/files/CityInitTesting.owl");

		try {
			cityOntology = ontoManager.loadOntologyFromOntologyDocument(ontology);
		} catch (OWLOntologyCreationException e) {
			System.out.println(e.getMessage());
		}
	}

	public void saveOntologyAs(String name) {
		File file = new File("src/files/" + name + ".owl");

		try {
			ontoManager.saveOntology(cityOntology, IRI.create(file.toURI()));
			System.out.println("Ontology saved to: " + file.getAbsolutePath());
		} catch (Exception e) {
			System.out.println("Failed to save ontology: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public void flushReasoner() {
		// reasoner.flush();
	}

	private void addObjectProperty(String propName, OWLNamedIndividual subject, OWLNamedIndividual target) {
		OWLObjectProperty prop = dataFactory.getOWLObjectProperty(IRI.create(ontologyIRIStr + propName));
		OWLObjectPropertyAssertionAxiom ax = dataFactory.getOWLObjectPropertyAssertionAxiom(prop, subject, target);
		ontoManager.addAxiom(cityOntology, ax);
	}

	private void addDataProperty(String propName, OWLNamedIndividual subject, Object value) {
		OWLDataProperty prop = dataFactory.getOWLDataProperty(IRI.create(ontologyIRIStr + propName));
		OWLLiteral literal;

		if (value instanceof String) {
			literal = dataFactory.getOWLLiteral((String) value);
		} else if (value instanceof Integer) {
			// literal = dataFactory.getOWLLiteral((Integer) value);
			literal = dataFactory.getOWLLiteral(Integer.toString((Integer) value), OWL2Datatype.XSD_INT); // defined it
																											// as
																											// xsd:int
																											// not
																											// xsd:integer
																											// in the
																											// owl file
																											// soooo
																											// just in
																											// case
		} else if (value instanceof Boolean) {
			literal = dataFactory.getOWLLiteral((Boolean) value);
		} else if (value instanceof Double) {
			literal = dataFactory.getOWLLiteral((Double) value);
		} else if (value instanceof Float) {
			literal = dataFactory.getOWLLiteral((Float) value);
		} else {
			throw new IllegalArgumentException("Unsupported data type for OWLLiteral: " + value.getClass().getName());
		}
		OWLDataPropertyAssertionAxiom ax = dataFactory.getOWLDataPropertyAssertionAxiom(prop, subject, literal);
		ontoManager.addAxiom(cityOntology, ax);
	}

	public Place addPersonToOntology(Person person) {
		OWLNamedIndividual personInd = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + person.getName()));
		OWLClass personClass = dataFactory.getOWLClass(IRI.create(ontologyIRIStr + "Person"));
		OWLClassAssertionAxiom ax = dataFactory.getOWLClassAssertionAxiom(personClass, personInd);
		ontoManager.addAxiom(cityOntology, ax);

		addDataProperty("hasEyeColor", personInd, person.getPhysicalTraits().getEyeColour());
		addDataProperty("hasName", personInd, person.getName());
		addDataProperty("hasGender", personInd, person.getPhysicalTraits().getGender());
		addDataProperty("hasHairColor", personInd, person.getPhysicalTraits().getHairColour());
		addDataProperty("hasHeight", personInd, person.getPhysicalTraits().getHeight());
		addDataProperty("hasSkinColor", personInd, person.getPhysicalTraits().getSkinTone());

		if (person.getPsychologicalTraits().hasTrait(Trait.AMBITIOUS)) {
			addDataProperty("isAmbitious", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.CALCULATING)) {
			addDataProperty("isCalculating", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.CALM)) {
			addDataProperty("isCalm", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.CARELESS)) {
			addDataProperty("isCareless", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.CHARMING)) {
			addDataProperty("isCharming", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.DECEIVING)) {
			addDataProperty("isDeceiving", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.DEPRESSED)) {
			addDataProperty("isDepressed", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.ENTREPRENEUR)) {
			addDataProperty("isEntrepreneur", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.EXTROVERT)) {
			addDataProperty("isExtrovert", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.FRIENDLY)) {
			addDataProperty("isFriendly", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.INTROVERT)) {
			addDataProperty("isIntrovert", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.NATURAL_LEADER)) {
			addDataProperty("isNaturalLeader", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.PSYCHOPATH)) {
			addDataProperty("isPsychopath", personInd, true);
		}
		if (person.getPsychologicalTraits().hasTrait(Trait.RUTHLESS)) {
			addDataProperty("isRuthless", personInd, true);
		}

		addDataProperty("hasAgility", personInd, person.getSkills().getAgility());
		addDataProperty("hasCharisma", personInd, person.getSkills().getCharisma());
		addDataProperty("hasEndurance", personInd, person.getSkills().getEndurance());
		addDataProperty("hasIntelligence", personInd, person.getSkills().getIntelligence());
		addDataProperty("hasMind", personInd, person.getSkills().getMind());
		addDataProperty("hasPerception", personInd, person.getSkills().getPerception());
		addDataProperty("hasStamina", personInd, person.getSkills().getStamina());
		addDataProperty("hasStrength", personInd, person.getSkills().getStrength());

		return ensurePersonHasHome(person);

	}

	public void addFriendship(String a, String b) {

		OWLNamedIndividual personFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + a));
		OWLNamedIndividual personBFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + b));
		addObjectProperty("isFriendsWith", personFromOnto, personBFromOnto);
		addObjectProperty("isFriendsWith", personBFromOnto, personFromOnto);

	}

	public void addPlaceNearby(String a, String b) {

		OWLNamedIndividual placeAFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + a));
		OWLNamedIndividual placeBFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + b));
		addObjectProperty("isPlaceNearby", placeAFromOnto, placeBFromOnto);

	}

	public void addisLocatedAt(String a, String b) {

		OWLNamedIndividual PersoneAFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + a));
		OWLNamedIndividual placeBFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + b));
		addObjectProperty("isLocatedAt", PersoneAFromOnto, placeBFromOnto);

	}

	private Place ensurePersonHasHome(Person person) {
		int roll = cityAdmin.getRandomNumberUsingNextInt(0, 2);
		if (roll == 0) {
			Place house = new Place(cityAdmin.getNextPlaceId(), "Place_house_" + ++lastHouseId, 0, null, 0, 0, 0);
			// addPlaceToOntology(house);

			OWLNamedIndividual personFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + person.getName()));
			OWLNamedIndividual homeFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + house.getName()));
			addObjectProperty("livesIn", personFromOnto, homeFromOnto);
			addObjectProperty("owns", personFromOnto, homeFromOnto);

			return house;

		} else {
			if (apartments.isEmpty()) {
				for (int i = 0; i < cityAdmin.initialPeople / 10 + 1; i++) {
					Place apartment = new Place(cityAdmin.getNextPlaceId(), "Place_apartment_" + ++lastApartmentId, 0,
							null, 0, 0, 0);
					apartments.add(apartment);
					// addPlaceToOntology(apartment);
				}
			}

			int apartmentComplexNumber = cityAdmin.getRandomNumberUsingNextInt(0, apartments.size());

			OWLNamedIndividual personFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + person.getName()));
			OWLNamedIndividual homeFromOnto = dataFactory.getOWLNamedIndividual(
					IRI.create(ontologyIRIStr + apartments.get(apartmentComplexNumber).getName()));
			addObjectProperty("livesIn", personFromOnto, homeFromOnto);
			return apartments.get(apartmentComplexNumber);
		}
	}

	public List<Person> getAllFriendsOf(String name) {
		OWLNamedIndividual personInd = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + name));
		OWLObjectProperty isFriendsWith = dataFactory
				.getOWLObjectProperty(IRI.create(ontologyIRIStr + "isFriendsWith"));

		List<Person> friends = new ArrayList<>();

		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getProperty().equals(isFriendsWith) && axiom.getSubject().equals(personInd)) {
				OWLIndividual friendInd = axiom.getObject();
				if (friendInd.isNamed()) {
					OWLNamedIndividual namedFriend = friendInd.asOWLNamedIndividual();
					String friendName = namedFriend.getIRI().getFragment();
					Person friendPerson = getCorrespondingPerson(friendName);
					if (friendPerson != null) {
						friends.add(friendPerson);
					}
				}
			}
		}

		return friends;
	}

	public List<Person> getAllNearbyPeople(String nameOfPerson) {
		OWLNamedIndividual personInd = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + nameOfPerson));
		OWLObjectProperty isLocatedAt = dataFactory.getOWLObjectProperty(IRI.create(ontologyIRIStr + "isLocatedAt"));

		OWLNamedIndividual placeWherePersonIs = null;

		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getSubject().equals(personInd) && axiom.getProperty().equals(isLocatedAt)) {
				OWLIndividual placeInd = axiom.getObject();
				if (placeInd.isNamed()) {
					placeWherePersonIs = placeInd.asOWLNamedIndividual();
					break;
				}
			}
		}

		if (placeWherePersonIs == null) {
			return new ArrayList<>();
		}

		List<Person> nearbyPeople = new ArrayList<>();

		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getProperty().equals(isLocatedAt)) {
				if (axiom.getObject().equals(placeWherePersonIs)) {
					OWLIndividual subject = axiom.getSubject();
					if (!subject.isNamed()) {
						continue;
					}

					OWLNamedIndividual otherPersonInd = subject.asOWLNamedIndividual();

					if (otherPersonInd.equals(personInd)) {
						continue;
					}

					String otherName = otherPersonInd.getIRI().getFragment();
					Person otherPerson = getCorrespondingPerson(otherName);
					if (otherPerson != null) {
						nearbyPeople.add(otherPerson);
					}
				}
			}
		}

		return nearbyPeople;
	}
	public void updateLocation(String personName, String placeName) {

	    OWLNamedIndividual person = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr +personName));
	    OWLNamedIndividual newPlace = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + placeName));
	    if (person == null || newPlace == null) {
	       
	        return;
	    }

	    ObjectProperty isLocatedAt = model.getObjectProperty(NS + "isLocatedAt");

	    // Remove existing location relationships
	    person.removeProperty(isLocatedAt);

	    // Add new location
	    person.addProperty(isLocatedAt, newPlace);
	}

	public List<Place> checkFreeSlots(List<Place> places) {
		 List<Place> availablePlaces = new ArrayList<>();

		    OWLObjectProperty worksAt = dataFactory.getOWLObjectProperty(IRI.create(ontologyIRIStr + "worksAt"));
		    OWLDataProperty hasStaffSlots = dataFactory.getOWLDataProperty(IRI.create(ontologyIRIStr + "hasStaffSlots"));

		    for (Place place : places) {
		        OWLNamedIndividual placeInd = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + place.getName())); 

		        int currentStaff = 0;
		        for (OWLNamedIndividual ind : cityOntology.getIndividualsInSignature()) {
		            for (OWLObjectPropertyAssertionAxiom ax : cityOntology.getObjectPropertyAssertionAxioms(ind)) {
		                if (ax.getProperty().equals(worksAt) && ax.getObject().equals(placeInd)) {
		                    currentStaff++;
		                }
		            }
		        }

		        int maxSlots = 0;
		        for (OWLDataPropertyAssertionAxiom ax : cityOntology.getDataPropertyAssertionAxioms(placeInd)) {
		            if (ax.getProperty().equals(hasStaffSlots)) {
		                OWLLiteral value = ax.getObject();
		                maxSlots = value.parseInteger();
		                break;
		            }
		        }

		        if (currentStaff < maxSlots) {
		            availablePlaces.add(place);
		        }
		    }

		    return availablePlaces;
	}

	public List<Person> getAllPeopleInPlace(String nameOfPlace) {
		OWLNamedIndividual placeFromOnto = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + nameOfPlace));

		OWLObjectProperty isLocatedAt = dataFactory.getOWLObjectProperty(IRI.create(ontologyIRIStr + "isLocatedAt"));

		List<Person> peopleHere = new ArrayList<>();

		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getProperty().equals(isLocatedAt)) {
				if (axiom.getObject().equals(placeFromOnto)) {
					OWLIndividual subject = axiom.getSubject();
					if (!subject.isNamed()) {
						continue;
					}
					OWLNamedIndividual personIndividual = subject.asOWLNamedIndividual();

					String name = personIndividual.getIRI().getFragment();

					Person pers = getCorrespondingPerson(name);
					if (pers != null) {
						peopleHere.add(pers);
					}
				}
			}
		}

		return peopleHere;

	}

	private Person getCorrespondingPerson(String name) {
		for (Person person : cityAdmin.people) {
			if (person.getName().equals(name)) {
				return person;
			}
		}
		return null;
	}

	private Place getCorrespondingPlace(String name) {
		for (Place place : cityAdmin.allPlaces) {
			if (place.getName().equals(name)) {
				return place;
			}
		}
		return null;
	}

	public List<Place> getAllPlacesAround(String nameOfPerson) {
		OWLNamedIndividual personFromOnto = dataFactory
				.getOWLNamedIndividual(IRI.create(ontologyIRIStr + nameOfPerson));
		OWLObjectProperty isLocatedAt = dataFactory.getOWLObjectProperty(IRI.create(ontologyIRIStr + "isLocatedAt"));
		OWLObjectProperty isPlaceNearby = dataFactory
				.getOWLObjectProperty(IRI.create(ontologyIRIStr + "isPlaceNearby"));

		List<Place> placesAround = new ArrayList<>();

		OWLNamedIndividual placeWherePersonIsLocated = null;

		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getSubject().equals(personFromOnto) && axiom.getProperty().equals(isLocatedAt)) {
				OWLIndividual obj = axiom.getObject();
				if (obj.isNamed()) {
					placeWherePersonIsLocated = obj.asOWLNamedIndividual();
					break;
				}
			}
		}

		if (placeWherePersonIsLocated == null) {

			return placesAround;
		}

		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getSubject().equals(placeWherePersonIsLocated) && axiom.getProperty().equals(isPlaceNearby)) {
				OWLIndividual nearbyPlaceInd = axiom.getObject();
				if (nearbyPlaceInd.isNamed()) {
					OWLNamedIndividual nearbyPlace = nearbyPlaceInd.asOWLNamedIndividual();

					String name = nearbyPlace.getIRI().getFragment();

					Place placeObj = getCorrespondingPlace(name);
					if (placeObj != null) {
						placesAround.add(placeObj);
					}
				}
			}
		}
		for (OWLObjectPropertyAssertionAxiom axiom : cityOntology.getAxioms(AxiomType.OBJECT_PROPERTY_ASSERTION)) {
			if (axiom.getObject().equals(placeWherePersonIsLocated) && axiom.getProperty().equals(isPlaceNearby)) {
				OWLIndividual subject = axiom.getSubject();
				if (subject.isNamed()) {
					OWLNamedIndividual nearbyPlace = subject.asOWLNamedIndividual();
					String name = nearbyPlace.getIRI().getFragment();
					Place placeObj = getCorrespondingPlace(name);
					if (placeObj != null && !placesAround.contains(placeObj)) {
						placesAround.add(placeObj);
					}
				}
			}
		}

		return placesAround;
	}

	public void addJobToOntology(Job job) {
		OWLNamedIndividual jobInd = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + job.getName()));
		OWLClass jobClass = dataFactory.getOWLClass(IRI.create(ontologyIRIStr + "Job"));
		OWLClassAssertionAxiom ax = dataFactory.getOWLClassAssertionAxiom(jobClass, jobInd);
		ontoManager.addAxiom(cityOntology, ax);

		addDataProperty("hasName", jobInd, job.getName());
		addDataProperty("hasSalary", jobInd, job.getSalary());

		addDataProperty("requiresAgility", jobInd, job.getMinimumSkills().getAgility());
		addDataProperty("requiresCharisma", jobInd, job.getMinimumSkills().getCharisma());
		addDataProperty("requiresEndurance", jobInd, job.getMinimumSkills().getEndurance());
		addDataProperty("requiresIntelligence", jobInd, job.getMinimumSkills().getIntelligence());
		addDataProperty("requiresMind", jobInd, job.getMinimumSkills().getMind());
		addDataProperty("requiresPerception", jobInd, job.getMinimumSkills().getPerception());
		addDataProperty("requiresStamina", jobInd, job.getMinimumSkills().getStamina());
		addDataProperty("requiresStrength", jobInd, job.getMinimumSkills().getStrength());
	}

	public void addPlaceToOntology(Place place) {
		OWLNamedIndividual placeInd = dataFactory.getOWLNamedIndividual(IRI.create(ontologyIRIStr + place.getName()));
		OWLClass placeClass = dataFactory.getOWLClass(IRI.create(ontologyIRIStr + "Place"));
		OWLClassAssertionAxiom ax = dataFactory.getOWLClassAssertionAxiom(placeClass, placeInd);
		ontoManager.addAxiom(cityOntology, ax);

		addDataProperty("hasName", placeInd, place.getName());
		addDataProperty("isLocatedAtX", placeInd, place.getxCoords());
		addDataProperty("isLocatedAtY", placeInd, place.getyCoords());
		addDataProperty("hasStaffSlots", placeInd, place.getJobSlots());
		addDataProperty("hasShifts", placeInd, place.getShifts());
		addDataProperty("hasLocalSalaryModifier", placeInd, place.getSalaryModifier());
		addDataProperty("hasProductionPerTurn", placeInd, place.getProductionPerTurn());

		if (place.getStaffedByJob() == cityAdmin.banker) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.banker.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);

		} else if (place.getStaffedByJob() == cityAdmin.cashier) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.cashier.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);

		} else if (place.getStaffedByJob() == cityAdmin.scientist) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.scientist.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);

		} else if (place.getStaffedByJob() == cityAdmin.policeman) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.policeman.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);

		} else if (place.getStaffedByJob() == cityAdmin.dealer) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.dealer.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);

		} else if (place.getStaffedByJob() == cityAdmin.officeWorker) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.officeWorker.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);

		} else if (place.getStaffedByJob() == cityAdmin.worker) {
			OWLNamedIndividual jobFromOnto = dataFactory
					.getOWLNamedIndividual(IRI.create(ontologyIRIStr + cityAdmin.worker.getName()));

			addObjectProperty("isStaffedBy", placeInd, jobFromOnto);
		}

	}

}
